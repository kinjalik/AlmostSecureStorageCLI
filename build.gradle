plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.5.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.5.0'
    id 'com.github.breadmoirai.github-release' version "2.2.12"
    id 'application'
}

version '0.3.0'
group 'ru.kinjalik'

repositories {
    mavenCentral()
    maven {
        url "https://maven.pkg.github.com/kinjalik/almost-secure-storage-core"
        credentials {
            username = System.getenv("GITHUB_ACTOR")
            password = System.getenv("GITHUB_TOKEN")
            if (username == null) {
                def localProperties = new Properties()
                localProperties.load(new FileInputStream("local.properties"))
                username = localProperties["USERNAME"]
                password = localProperties["TOKEN"]
            }
        }
    }
}

dependencies {
    compileOnly "org.jetbrains.kotlinx:kotlinx-cli:0.3.2"
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.1"
    implementation "ru.kinjalik:almost-secure-storage-core:0.2.14"

    implementation "io.ktor:ktor-client-core:1.5.2"
    implementation "io.ktor:ktor-client-cio:1.5.2"


    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

}

test {
    useJUnitPlatform()
}

githubRelease {
    def tokenTmp = System.getenv("GITHUB_TOKEN")// This is your personal access token with Repo permissions
    if (tokenTmp == null) {
        def localProperties = new Properties()
        localProperties.load(new FileInputStream("local.properties"))
        token localProperties["TOKEN"]
    } else {
        token tokenTmp
    }
    owner "kinjalik" // default is the last part of your group. Eg group: "com.github.breadmoirai" => owner: "breadmoirai"
    repo "AlmostSecureStorageCLI" // by default this is set to your project name
    prerelease false // by default this is false
    FilenameFilter filter = {dir, filename -> filename.contains(project.version)}
    releaseAssets = jar.destinationDir.listFiles filter

    overwrite true // by default false; if set to true, will delete an existing release with the same tag and name
//    dryRun true // by default false; you can use this to see what actions would be taken without making a release
    apiEndpoint "https://api.github.com" // should only change for github enterprise users
}
//
application {
    mainClass = 'MainKt'
}

jar {
    manifest {
        attributes 'Main-Class': 'MainKt'
        attributes 'Implementation-Version': project.version
        attributes 'Git-Repository': "kinjalik/AlmostSecureStorageCLI"
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it)}
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it)}
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}